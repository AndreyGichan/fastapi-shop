import { useState } from "react"
import { Button } from "../ui/Button"
import { Card, CardContent, CardHeader, CardTitle } from "../ui/Card"
import { Separator } from "../ui/Separator"
import { ShoppingBag, Shield, Truck, CreditCard } from "lucide-react"
import { apiFetch, clearCart } from "../../lib/api"
import { useCart } from "../../context/CartContext"
import { useToast } from "../ui/useToast"

export function CheckoutSummary({ items, address, phone }) {
    const { reloadCart } = useCart()
    const [loading, setLoading] = useState(false)
    const { toast } = useToast()

    const subtotal = items.reduce((sum, item) => sum + item.price * item.quantity, 0)
    const shipping = subtotal > 1000 ? 0 : 20
    const total = subtotal + shipping

    const handleConfirmOrder = async () => {
        if (!items.length) {
            toast({
                title: "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                description: "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞",
                variant: "destructive",
            })
            return
        }
        if (!address || !phone) {
            toast({
                title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω",
                description: "–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞",
                variant: "destructive",
            })
            return
        }

        setLoading(true)
        try {
            const order = await apiFetch("/orders/", {
                method: "POST",
                body: { address, phone }
            })
            toast({
                title: "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
                description: `–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${order.id}`,
                variant: "success",
            })

            await clearCart()
            await reloadCart()

            window.location.href = "/profile"
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", err)
            toast({
                title: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
                description: err.message || "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                variant: "destructive",
            })
        } finally {
            setLoading(false)
        }
    }

    return (
        <div className="space-y-6">
            <Card className="bg-background">
                <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                        <ShoppingBag className="h-5 w-5" />
                        –í–∞—à –∑–∞–∫–∞–∑
                    </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                    {items.map((item) => (
                        <div key={item.id} className="flex items-center gap-3">
                            <div className="w-16 h-16 rounded-lg flex items-center justify-center">
                                <img src={item.image_url || "/placeholder.svg"} alt={item.name} className="w-full h-full object-contain rounded" />
                            </div>
                            <div className="flex-1 min-w-0">
                                <div className="text-sm font-medium truncate">{item.name}</div>
                                <div className="text-xs text-muted-foreground">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}</div>
                            </div>
                            <div className="text-sm font-medium">{(item.price * item.quantity).toLocaleString()} —Ä.</div>
                        </div>
                    ))}
                </CardContent>
            </Card>

            <Card className="sticky top-24 bg-background">
                <CardHeader>
                    <CardTitle>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                    <div className="space-y-2">
                        <div className="flex justify-between">
                            <span>–¢–æ–≤–∞—Ä—ã ({items.reduce((sum, item) => sum + item.quantity, 0)})</span>
                            <span>{subtotal.toLocaleString()} —Ä.</span>
                        </div>
                        <div className="flex justify-between">
                            <span>–î–æ—Å—Ç–∞–≤–∫–∞</span>
                            <span className={shipping === 0 ? "text-green-600" : ""}>
                                {shipping === 0 ? "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ" : `${shipping} —Ä.`}
                            </span>
                        </div>
                    </div>

                    <Separator />

                    <div className="flex justify-between text-lg font-bold">
                        <span>–ö –æ–ø–ª–∞—Ç–µ</span>
                        <span>{total.toLocaleString()} —Ä.</span>
                    </div>

                    {shipping === 0 && (
                        <p className="text-sm text-green-600 flex items-center gap-1">
                            üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 1000 —Ä.
                        </p>
                    )}

                    <Button
                        className="w-full"
                        size="lg"
                        onClick={handleConfirmOrder}
                        disabled={loading || !items.length}
                    >
                        {loading ? "–û—Ñ–æ—Ä–º–ª—è–µ–º..." : "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"}
                    </Button>

                    <div className="text-xs text-muted-foreground space-y-2">
                        <div className="flex items-center gap-2">
                            <Truck className="h-3 w-3" />
                            <span>–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞</span>
                        </div>
                        <div className="flex items-center gap-2">
                            <Shield className="h-3 w-3" />
                            <span>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è</span>
                        </div>
                        <div className="flex items-center gap-2">
                            <CreditCard className="h-3 w-3" />
                            <span>–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞</span>
                        </div>
                    </div>
                </CardContent>
            </Card>
        </div>
    )
}
